Given an array of positive integers arr[], return the second largest element from the array. If the second largest element doesn't exist then return -1.
Note: The second largest element should not be equal to the largest element.
Examples:
Input: arr[] = [12, 35, 1, 10, 34, 1]
Output: 34
Explanation: The largest element of the array is 35 and the second largest element is 34.
-------------------------------------------------------------------------------------------------------------------------------------------------------
#DriverCode

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.nextLine());
        while (t-- > 0) {
            String[] arr1Str = sc.nextLine().split(" ");
            int[] arr = Arrays.stream(arr1Str).mapToInt(Integer::parseInt).toArray();
            Solution ob = new Solution();
            int ans = ob.getSecondLargest(arr);
            System.out.println(ans);

            System.out.println("~");
        }
    }
}

#OurSolution
class Solution {
    public int getSecondLargest(int[] arr) {
        TreeSet<Integer> st=new TreeSet<>();
        for(int i=0;i<arr.length;i++){
            st.add(arr[i]);
        }
        if (st.size() < 2) {
            return -1;
        }
        st.pollLast(); 
        return st.pollLast(); 
    }
}
