Question: Given an array arr[], where each element is at most k away from its target position, you need to sort the array optimally.
Note: DO NOT use STL sort() function for this question
Input: arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3
Output: [2, 3, 5, 6, 8, 9, 10]
Explanation: The sorted array will be 2 3 5 6 8 9 10
----------------------------------------------------------------------------------------------------------------------------------------
#DriverCode
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            String line = br.readLine();
            String[] tokens = line.split(" ");

            // Create an ArrayList to store the integers
            ArrayList<Integer> array = new ArrayList<>();

            // Parse the tokens into integers and add to the array
            for (String token : tokens) {
                array.add(Integer.parseInt(token));
            }
            int k = Integer.parseInt(br.readLine());
            int[] arr = new int[array.size()];
            int idx = 0;
            for (int i : array) arr[idx++] = i;

            // Create an instance of the Solution class
            Solution obj = new Solution();
            // Call nearlySorted on the instance
            obj.nearlySorted(arr, k);

            // Print the sorted array
            for (int i : arr) {
                System.out.print(i + " ");
            }
            System.out.println();

            System.out.println("~");
        }
    }
}

#ourSolution
class Solution {
    public void nearlySorted(int[] arr, int k) {
        Queue<Integer> minHeap = new PriorityQueue<>();
        int j = 0;
        for(int i = 0;i<arr.length;i++){
            minHeap.add(arr[i]);
            if(minHeap.size() > k){
                arr[j++] = minHeap.poll();
            }
        }
        while(!minHeap.isEmpty()){
            arr[j++] = minHeap.poll();
        }
    }
}
