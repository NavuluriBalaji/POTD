Question: You are given a 2D array consisting of only 1's and 0's, where each row is sorted in non-decreasing order. You need to find and return the index of the first row that has the most number of 1s. If no such row exists, return -1.
Note: 0-based indexing is followed.

Java Code:-
#DriverCode

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int tc = sc.nextInt();
        while (tc-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int arr[][] = new int[n][m];

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }
            int ans = new Solution().rowWithMax1s(arr);
            System.out.println(ans);
        }
    }
}

#OurSolution

class Solution {
    public int rowWithMax1s(int arr[][]) {
        int index=-1;
        int max=0;
        
        int n=arr.length,m=arr[0].length;
        
        for(int i=0;i<n;i++){
        int count=0;
            for(int j=0;j<m;j++){
                if(arr[i][j]==1)count++;
            }
            if(max<count){
                max=count;
                index=i;
            }
        }
        return index;
    }
}
